group_by(`Attended SA?`) %>%
select(one_of(GPA_cov))
GPA_cov <- c('SAT Group', 'Gender', 'College: Organization', 'First Generation College Student')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Group', 'Gender', 'College: Organization', 'First Generation College Student')
GPA_cov <- c(`SAT Group`, `Gender`, `College: Organization`, `First Generation College Student`)
GPA_cov <- c('SAT Group', 'Gender', 'College: Organization', 'First Generation College Student')
ecls %>%
group_by(`Attended SA?`) %>%
select(`SAT Group`, Gender) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Group', 'Gender', 'College: Organization', 'First Generation College Student')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
select(`SAT Group`, Gender) %>%
summarise_all(funs(mean(., na.rm = T)))
detach("package:MASS", unload = TRUE)
GPA_cov <- c('SAT Group', 'Gender', 'College: Organization', 'First Generation College Student')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
select(one_of(GPA_cov)) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Group', 'Gender', 'College: Organization', 'First Generation College Student')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Group', 'Gender', 'College: Organization', 'First Generation College Student')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Total', 'Gender', 'College: Organization', 'First Generation College Student')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Total', 'Federal Poverty Level Percentage')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Math', 'Federal Poverty Level Percentage')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Math', 'SAT Reading', 'Federal Poverty Level Percentage')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
scholar_metadata %>%
summarise(sd = sd(`Reported Total GPA`, na.rm = TRUE))
scholar_metadata_standardized_GPA = scholar_metadata %>%
mutate(`Reported Total GPA (Standardized)` = (`Reported Total GPA` - mean(`Reported Total GPA` , na.rm = TRUE)) / sd(`Reported Total GPA`, na.rm = TRUE)) %>% # standardize GPA
mutate(`Attended SA?` = ifelse(`# SA Cohorts` != "0", "Yes", "No")) %>%
filter(!is.na(`Attended SA?`))
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
summarise(n_scholars = n(),
mean_GPA_std = mean(`Reported Total GPA (Standardized)`, na.rm = TRUE),
std_error = sd(`Reported Total GPA (Standardized)`, na.rm = TRUE) / sqrt(n_scholars))
GPA_cov <- c('SAT Math', 'SAT Reading', 'Federal Poverty Level Percentage')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Math', 'SAT Reading', 'Federal Poverty Level Percentage', 'Black or African American')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Math', 'SAT Reading', 'Federal Poverty Level Percentage', 'Black or African American', 'American Indian or Alaska Native', 'Asian', 'Hispanic or Latinx', 'Native Hawaiian or Pacific Islander', 'White')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T)))
GPA_cov <- c('SAT Math', 'SAT Reading', 'Federal Poverty Level Percentage', 'Black or African American', 'American Indian or Alaska Native', 'Asian', 'Hispanic or Latinx', 'Native Hawaiian or Pacific Islander', 'White')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T))) %>%
pander()
GPA_cov <- c('SAT Math', 'SAT Reading', 'Federal Poverty Level Percentage', 'Black or African American', 'American Indian or Alaska Native', 'Asian', 'Hispanic or Latinx', 'Native Hawaiian or Pacific Islander', 'White')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T))) %>%
t()
GPA_cov <- c('SAT Math', 'SAT Reading', 'Federal Poverty Level Percentage', 'Black or African American', 'American Indian or Alaska Native', 'Asian', 'Hispanic or Latinx', 'Native Hawaiian or Pacific Islander', 'White')
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T))) %>%
t() %>%
pander()
lapply(GPA_cov, function(v) {
t.test(scholar_metadata_standardized_GPA[, v] ~ scholar_metadata_standardized_GPA[, 'Attended SA?'])
})
with(scholar_metadata_standardized_GPA, t.test(`SAT Math` ~ `Attended SA?`))  #(repeat for each covariate)
lapply(GPA_cov, function(v) {
t.test(scholar_metadata_standardized_GPA[, v] ~ scholar_metadata_standardized_GPA[, 'Attended SA?'])
})
lapply(GPA_cov, function(v) {
t.test(unlist(scholar_metadata_standardized_GPA[, v]) ~ unlist(scholar_metadata_standardized_GPA[, 'Attended SA?']))
})
GPA_cov <- c('SAT Math',                            # ns
'SAT Reading',                         # p-value = 0.0001394
'Federal Poverty Level Percentage',    # p-value = 0.05998
'Black or African American',           # ns
'American Indian or Alaska Native',    # ns
'Asian',                               # ns
'Hispanic or Latinx',                  # p-value = 0.02414
'Native Hawaiian or Pacific Islander', # ns
'White',                               # p-value = 0.05944
"Class Rank",
"College: Forbes Ranking")
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T))) %>%
t() %>%
pander()
lapply(GPA_cov, function(v) {
t.test(unlist(scholar_metadata_standardized_GPA[, v]) ~ unlist(scholar_metadata_standardized_GPA[, 'Attended SA?']))
})
m_ps <- glm(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking`,
family = binomial(), data = scholar_metadata_standardized_GPA)
m_ps <- glm(contrasts(`Attended SA?`) ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking`,
family = binomial(), data = scholar_metadata_standardized_GPA)
scholar_metadata %>%
summarise(sd = sd(`Reported Total GPA`, na.rm = TRUE))
scholar_metadata_standardized_GPA = scholar_metadata %>%
mutate(`Reported Total GPA (Standardized)` = (`Reported Total GPA` - mean(`Reported Total GPA` , na.rm = TRUE)) / sd(`Reported Total GPA`, na.rm = TRUE)) %>% # standardize GPA
mutate(`Attended SA?` = ifelse(`# SA Cohorts` != "0", 1, 0)) %>%
filter(!is.na(`Attended SA?`))
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
summarise(n_scholars = n(),
mean_GPA_std = mean(`Reported Total GPA (Standardized)`, na.rm = TRUE),
std_error = sd(`Reported Total GPA (Standardized)`, na.rm = TRUE) / sqrt(n_scholars))
with(scholar_metadata_standardized_GPA, t.test(`Reported Total GPA (Standardized)` ~ `Attended SA?`))
GPA_cov <- c('SAT Math',                            # ns
'SAT Reading',                         # p-value = 0.0001394
'Federal Poverty Level Percentage',    # p-value = 0.05998
'Black or African American',           # ns
'American Indian or Alaska Native',    # ns
'Asian',                               # ns
'Hispanic or Latinx',                  # p-value = 0.02414
'Native Hawaiian or Pacific Islander', # ns
'White',                               # p-value = 0.05944
"Class Rank",                          # ns
"College: Forbes Ranking")             # p-value = 0.005119
scholar_metadata_standardized_GPA %>%
group_by(`Attended SA?`) %>%
dplyr::select(GPA_cov) %>%
summarise_all(funs(mean(., na.rm = T))) %>%
t() %>%
pander()
m_ps <- glm(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking`,
family = binomial(), data = scholar_metadata_standardized_GPA)
summary(m_ps)
m_ps <- glm(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking`,
family = binomial(), data = scholar_metadata_standardized_GPA)
summary(m_ps)
prs_df <- data.frame(pr_score = predict(m_ps, type = "response"),
`Attended SA?` = m_ps$model$`Attended SA?`)
head(prs_df)
labs <- paste("Summer Academy:", c("Attended", "Did not attend"))
prs_df %>%
mutate(`Attended SA?` = ifelse(`Attended SA?` == 1, labs[1], labs[2])) %>%
ggplot(aes(x = pr_score)) +
geom_histogram(color = "white") +
facet_wrap(~`Attended SA?) +
xlab("Probability of going to Summer Academy") +
theme_bw()
labs <- paste("Summer Academy:", c("Attended", "Did not attend"))
prs_df %>%
mutate(`Attended SA?` = ifelse(`Attended SA?` == 1, labs[1], labs[2])) %>%
ggplot(aes(x = pr_score))
labs <- paste("Summer Academy:", c("Attended", "Did not attend"))
prs_df %>%
mutate(`Attended SA?` = ifelse(Attended.SA. == 1, labs[1], labs[2])) %>%
ggplot(aes(x = pr_score)) +
geom_histogram(color = "white") +
facet_wrap(~Attended.SA.) +
xlab("Probability of going to Summer Academy") +
theme_bw()
labs <- paste("Summer Academy:", c("Attended", "Did not attend"))
prs_df %>%
mutate(`Attended SA?` = ifelse(Attended.SA. == 1, labs[1], labs[2])) %>%
ggplot(aes(x = pr_score)) +
geom_histogram(color = "white", binwidth = 0.1) +
facet_wrap(~Attended.SA.) +
xlab("Probability of going to Summer Academy") +
theme_bw()
labs <- paste("Summer Academy:", c("Attended", "Did not attend"))
prs_df %>%
mutate(`Attended SA?` = ifelse(Attended.SA. == 1, labs[1], labs[2])) %>%
ggplot(aes(x = pr_score)) +
geom_histogram(color = "white", binwidth = 0.05) +
facet_wrap(~Attended.SA.) +
xlab("Probability of going to Summer Academy") +
theme_bw()
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College Name`, `# SA Cohorts`) %>%
summarise(n = n()) %>%
spread(key = `# SA Cohorts`, value = n) %>%
select(-`<NA>`) %>%
rename(`Did Not Attend SA` = `0`) %>%
mutate(`Attended SA` = sum(`1`,`2`, na.rm = TRUE)) %>%
select(-`1`,-`2`) %>%
filter(`Did Not Attend SA` > 0 & `Attended SA` > 0)
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College: Organization`, `# SA Cohorts`) %>%
summarise(n = n()) %>%
spread(key = `# SA Cohorts`, value = n) %>%
select(-`<NA>`) %>%
rename(`Did Not Attend SA` = `0`) %>%
mutate(`Attended SA` = sum(`1`,`2`, na.rm = TRUE)) %>%
select(-`1`,-`2`) %>%
filter(`Did Not Attend SA` > 0 & `Attended SA` > 0)
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College Name`, `# SA Cohorts`) %>%
summarise(n = n()) %>%
spread(key = `# SA Cohorts`, value = n) %>%
rename(`Did Not Attend SA` = `0`) %>%
mutate(`Attended SA` = sum(`1`,`2`, na.rm = TRUE)) %>%
select(-`1`,-`2`) %>%
filter(`Did Not Attend SA` > 0 & `Attended SA` > 0)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
install.packages('MatchIt')
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
summary(mod_match)
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
plot(mod_match)
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
dta_m
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
dta_m %>%
group_by(`Attended SA?`) %>%
select(one_of(GPA_cov)) %>%
summarise_all(funs(mean))
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
dta_m %>%
group_by(`Attended SA?`) %>%
dplyr::select(one_of(GPA_cov)) %>%
summarise_all(funs(mean))
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
dta_m %>%
group_by(`Attended SA?`) %>%
dplyr::select(one_of(GPA_cov)) %>%
summarise_all(funs(mean))
lapply(ecls_cov, function(v) {
t.test(dta_m[, v] ~ dta_m$catholic)
})
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
dta_m %>%
group_by(`Attended SA?`) %>%
dplyr::select(one_of(GPA_cov)) %>%
summarise_all(funs(mean))
lapply(GPA_cov, function(v) {
t.test(dta_m[, v] ~ dta_m$`Attended SA?`)
})
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
with(dta_m, t.test(`Reported Total GPA (Standardized)` ~ `Attended SA?`))
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Federal Poverty Level Percentage` + `Hispanic or Latinx` + `White` + `College: Forbes Ranking` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
with(scholar_metadata_standardized_GPA_complete_records, t.test(`Reported Total GPA (Standardized)` ~ `Attended SA?`))
with(dta_m, t.test(`Reported Total GPA (Standardized)` ~ `Attended SA?`))
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Current Major STEM?` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
library(MatchIt)
scholar_metadata_standardized_GPA_complete_records <- scholar_metadata_standardized_GPA %>%  # MatchIt does not allow missing values
dplyr::select(`Reported Total GPA (Standardized)`, `Attended SA?`, `Current Major STEM?`, `College: Organization`, one_of(GPA_cov)) %>%
na.omit()
mod_match <- matchit(`Attended SA?` ~ `SAT Reading` + `SAT Math` + `Current Major STEM?` + `College: Organization`,
method = "nearest", data = scholar_metadata_standardized_GPA_complete_records)
dta_m <- match.data(mod_match)
dim(dta_m)
with(scholar_metadata_standardized_GPA_complete_records, t.test(`Reported Total GPA (Standardized)` ~ `Attended SA?`))
with(dta_m, t.test(`Reported Total GPA (Standardized)` ~ `Attended SA?`))
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College Name`, `# SA Cohorts`) %>%
summarise(n = n()) %>%
spread(key = `# SA Cohorts`, value = n) %>%
dplrl::select(-`<NA>`) %>%
rename(`Did Not Attend SA` = `0`) %>%
mutate(`Attended SA` = sum(`1`,`2`, na.rm = TRUE)) %>%
dplrl::select(-`1`,-`2`) %>%
filter(`Did Not Attend SA` > 0 & `Attended SA` > 0)
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College Name`, `# SA Cohorts`) %>%
summarise(n = n()) %>%
spread(key = `# SA Cohorts`, value = n) %>%
dplyr::select(-`<NA>`) %>%
rename(`Did Not Attend SA` = `0`) %>%
mutate(`Attended SA` = sum(`1`,`2`, na.rm = TRUE)) %>%
dplyr::select(-`1`,-`2`) %>%
filter(`Did Not Attend SA` > 0 & `Attended SA` > 0)
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College Name`, `# SA Cohorts`) %>%
summarise(avg_GPA = mean(`Reported Total GPA`, na.rm = T), n = n()) %>%
spread(key = `# SA Cohorts`, value = n) %>%
dplyr::select(-`<NA>`) %>%
rename(`Did Not Attend SA` = `0`) %>%
mutate(`Attended SA` = sum(`1`,`2`, na.rm = TRUE)) %>%
dplyr::select(-`1`,-`2`) %>%
filter(`Did Not Attend SA` > 0 & `Attended SA` > 0)
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College Name`, `# SA Cohorts`) %>%
summarise(avg_GPA = mean(`Reported Total GPA`, na.rm = T), n = n())
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College Name`, `# SA Cohorts`) %>%
summarise(avg_GPA = mean(`Reported Total GPA`, na.rm = T), n = n()) %>%
spread(key = `# SA Cohorts`, value = n, -avg_GPA)
scholar_metadata %>%
filter(Cohort > 2015) %>%
group_by(`College Name`, `# SA Cohorts`) %>%
summarise(avg_GPA = mean(`Reported Total GPA`, na.rm = T), n = n()) %>%
spread(key = `# SA Cohorts`, value = n)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/SCS-Noonan-CSC")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/SCS-Noonan-CSC")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/Workshops/Stanford-DataVis")
#render site.
rmarkdown::render_site()
getwd()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/Workshops/Stanford-DataVis")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google\ Drive/Synergistic\ Activities/Workshops/Stanford-DataVis")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google\\ Drive/Synergistic\\ Activities/Workshops/Stanford-DataVis")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google\\ Drive/Synergistic\\ Activities/Workshops/Stanford-DataVis")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google\ Drive/Synergistic\\ Activities/Workshops/Stanford-DataVis")
setwd("~/Google Drive/Synergistic Activities/Workshops/2019 Stanford/Stanford-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/Workshops/Stanford-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/Workshops/Stanford-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Synergistic Activities/Workshops/Stanford-DataVis")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
install.packages("kableExtra")
library(knitr)
library(kableExtra)
